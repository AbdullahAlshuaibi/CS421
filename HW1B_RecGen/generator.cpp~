#include<iostream>
#include <stdlib.h>
#include<string>
using namespace std;
#include "queue.h" // include queue.h or equivalent such as <queue>

//----------------------------------------------
// CS421 HW1 
// Write a generator in C++ for L = {x | x is a binary number}.
// Your name: Abdullah Alshuaibi
//----------------------------------------------

// Copy the recognizer function here from the other file.
//  The recognizer function should return TRUE or FALSE
//  checking each character
//  to make sure it is 0 or 1. (leading 0's are allowed).
bool recognizer(string s)
{
  for(int i=0; i< s.size(); i++)
    {
      if(s[i]!='0' and s[i]!='1')
        {
          return false;
        }
    }
  return true;
}// end of recognizer



// main: It should create each string over E = {0,1,2} systematically
//   (short to long) and pass each string to the recognizer function
//   created in Part a).  Hint: use a queue to generate strings
//   Only those strings for which the recognizer returned TRUE
//   should be displayed. 
//   Keeps on going until the queue overflows but the user can 
//   terminate the program with control-C 
//   after about 20 strings have been displayed.
int main()
{ 
  queue string; // queue object

  string.add("0"); // adding "0" in the queue
  string.add("1"); // adding "1" in the queue
  string.add("2"); // adding "2" in the queue

  while(!string.isFull())
    {
      try
	{
	  el_t str; // the displied string
	  string.remove(str); // caaling remove to get the front elemnt for displying
	  // generate a string
	  //string.add(str+"0"); // adding 0 to the string ex(00) 
	  //string.add(str+"1"); // adding 1 to the string ex(01) 
	  //string.add(str+"2"); // adding 2 to the string ex(02) 

	  // if the recognizer says true, display it 
	  if(recognizer(str))
	    {
	      cout<<str<<endl;
	      string.add(str+"0"); // adding 0 to the string ex(00)
	      string.add(str+"1"); // adding 1 to the string ex(01)
	      string.add(str+"2"); // adding 2 to the string ex(02)
	    }
	}
      catch (queue::Overflow)
        {cout<<"."<<endl<<"."<<endl<<"'Overflows' 'Overflows' 'Overflows'"<<endl; exit(1); }

    }// end of while

}// end of main
